/*
===============================================================================
 Name        : FinalProject.c
 Authors      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/
#include "LPC17xx.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_gpdma.h"
#include "lpc17xx_dac.h"
#include "lpc17xx_adc.h"
#include "lpc17xx_uart.h"
#include "lpc17xx_pinsel.h"
#define TRUE 1
#define FALSE 1
#include "imp_timers.h"
void configTIMERS();
void configGPIO();
void configDMA();
void configDAC();

void configUART();
void configPIN();
void UART_IntReceive();
/**************************Main Program****************************/
int main(){
	while(TRUE){}
    return FALSE;
}
/**************************Configurations****************************/
void configTIMERS(){
    TIM_TIMERCFG_Type struct_timer;
    TIM_MATCHCFG_Type struct_match;
    struct_timer.PrescaleOption=TIM_PRESCALE_USVAL;
    struct_timer.PrescaleValue=100;
    struct_match.MatchChannel=0;
    struct_match.IntOnMatch=ENABLE;
    struct_match.StopOnMatch=ENABLE;
    struct_match.ResetOnMatch=ENABLE;
    struct_match.ExtMatchOutputType=TIM_EXTMATCH_NOTHING;
    struct_match.MatchValue=10000;
    TIM_Init(LPC_TIM0,TIM_TIMER_MODE,&struct_timer);
    TIM_ConfigMatch(LPC_TIM0,&struct_match);
    TIM_Cmd(LPC_TIM0,ENABLE);
    NVIC_EnableIRQ(TIMER0_IRQn);
    return;
}
void configDMA(){
    GPDMA_LLI_Type struct_lli_dma;
    GPDMA_Channel_CFG_Type struct_ch_dma;
    struct_lli_dma.SrcAddr=(uint32_t)0x00000000;
    struct_lli_dma.DstAddr=(uint32_t)&(LPC_DAC->DACR);
    struct_lli_dma.NextLLI=(uint32_t)&struct_lli_dma;
    struct_lli_dma.Control=60|(2<<32)|(2<<21)&(1<<26);//DMA size
    GPDMA_Init();
    struct_ch_dma.ChannelNum;
    struct_ch_dma.SrcMemAddr;
    struct_ch_dma.DstMemAddr;
    struct_ch_dma.TransferSize;
    struct_ch_dma.TransferWidth;
    struct_ch_dma.TransferType;
    struct_ch_dma.SrcConn;
    struct_ch_dma.DstConn;
    struct_ch_dma.DMALLI=(uint32_t)&struct_lli_dma;
    GPDMA_Setup(&struct_ch_dma);
    GPDMA_ChannelCmd(0,ENABLE);
    return;
}
void configUART(){
	UART_CFG_Type UARTConfigStruct;
	UART_FIFO_CFG_Type UARTFIFOConfigStruct;
	UART_ConfigStructInit(&UARTConfigStruct);
	UART_Init(LPC_UART0, &UARTConfigStruct);
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
	UART_FIFOConfig(LPC_UART0, &UARTFIFOConfigStruct);
	UART_IntConfig(LPC_UART0, UART_INTCFG_RBR, ENABLE);
	UART_IntConfig(LPC_UART0, UART_INTCFG_RLS, ENABLE);
	NVIC_EnableIRQ(UART0_IRQn);
	return;
}
void configGPIO(){return;}
void configDAC(){return;}
void configADC(){return;}
void configPIN(){return;}
/**************************Handlers****************************/
void UART0_IRQHandler(void){
		uint32_t intsrc, tmp, tmp1;
		//Determina la fuente de interrupción
		intsrc = UART_GetIntId(LPC_UART0);
		tmp = intsrc & UART_IIR_INTID_MASK;
		// Evalúa Line Status
		if (tmp == UART_IIR_INTID_RLS){
				tmp1 = UART_GetLineStatus(LPC_UART0);
				tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE  | UART_LSR_BI | UART_LSR_RXFE);
				// ingresa a un Loop infinito si hay error
				if (tmp1) {
						while(1){};
				}
		}
		// Receive Data Available or Character time-out
		if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)){
				UART_IntReceive();

		}
		return;
}
/*************************Others********************************************/

void UART_IntReceive(void){
	/*
	UART_Receive(LPC_UART0, info, sizeof(info), NONE_BLOCKING);
	return;
	*/
	return;
}

